pipeline {
    agent any
    environment {
        DOCKER_REGISTRY = "atakan1927"
        HELM_REPO_URL = "https://your-github-username.github.io/KubernetesInfra/"
        KUBECONFIG = credentials('kubeconfig-credential-id')
        GIT_CREDS = credentials('github-credentials-id')
    }
    stages {
        stage('Preparation') {
            steps {
                script {
                    sh "helm repo add myrepo ${HELM_REPO_URL}"
                    sh "helm repo update"
                    sh "git config user.email 'jenkins@example.com'"
                    sh "git config user.name 'Jenkins'"
                }
            }
        }
        stage('Build and Test Web App') {
            steps {
                dir('project_repositories/web-app') {
                    sh 'npm ci'
                    sh 'npm run lint'
                    sh 'npm test'
                    script {
                        env.WEB_APP_VERSION = incrementVersion(readFile('version.txt').trim())
                        writeFile file: 'version.txt', text: env.WEB_APP_VERSION
                        sh "docker build -t ${DOCKER_REGISTRY}/web-app:${env.WEB_APP_VERSION} ."
                        sh "docker push ${DOCKER_REGISTRY}/web-app:${env.WEB_APP_VERSION}"
                    }
                }
            }
        }
        stage('Update Web App Helm Chart') {
            steps {
                script {
                    updateHelmChart('web-app', env.WEB_APP_VERSION)
                    sh "helm package charts/web-app -d docs/"
                    sh "helm repo index docs --url ${HELM_REPO_URL}"
                    sh "git add ."
                    sh "git commit -m 'Update web-app Helm chart to version ${env.WEB_APP_VERSION}'"
                    sh "git push https://${GIT_CREDS_USR}:${GIT_CREDS_PSW}@github.com/your-username/KubernetesInfra.git main"
                }
            }
        }
        stage('Deploy to Staging') {
            steps {
                script {
                    // Ensure staging namespace exists
                    sh "kubectl create namespace staging --dry-run=client -o yaml | kubectl apply -f -"
                    
                    // Deploy database
                    sh """
                        helm upgrade --install database-staging myrepo/database \
                            --namespace staging \
                            --values charts/database/values-staging.yaml
                    """
                    
                    // Deploy worker
                    sh """
                        helm upgrade --install worker-staging myrepo/worker \
                            --namespace staging \
                            --values charts/worker/values-staging.yaml
                    """
                    
                    // Deploy web-app
                    sh """
                        helm upgrade --install web-app-staging myrepo/web-app \
                            --namespace staging \
                            --values charts/web-app/values-staging.yaml \
                            --set image.tag=${env.WEB_APP_VERSION}
                    """
                }
            }
        }
        stage('Run Integration Tests') {
            steps {
                script {
                    // Wait for deployments to be ready
                    sh "kubectl rollout status deployment/database-staging -n staging"
                    sh "kubectl rollout status deployment/worker-staging -n staging"
                    sh "kubectl rollout status deployment/web-app-staging -n staging"
                    
                    // Run your integration tests here
                    sh 'echo "Running integration tests against staging environment..."'
                    // Add your actual integration test commands here
                }
            }
        }
        stage('Approve Production Deployment') {
            steps {
                input message: 'Deploy to production?', ok: 'Deploy'
            }
        }
        stage('Deploy to Production') {
            steps {
                script {
                    // Ensure production namespace exists
                    sh "kubectl create namespace production --dry-run=client -o yaml | kubectl apply -f -"
                    
                    // Deploy database
                    sh """
                        helm upgrade --install database-prod myrepo/database \
                            --namespace production \
                            --values charts/database/values-production.yaml
                    """
                    
                    // Deploy worker
                    sh """
                        helm upgrade --install worker-prod myrepo/worker \
                            --namespace production \
                            --values charts/worker/values-production.yaml
                    """
                    
                    // Deploy web-app
                    sh """
                        helm upgrade --install web-app-prod myrepo/web-app \
                            --namespace production \
                            --values charts/web-app/values-production.yaml \
                            --set image.tag=${env.WEB_APP_VERSION}
                    """
                }
            }
        }
    }
    post {
        always {
            cleanWs()
        }
        success {
            script {
                if (env.BRANCH_NAME == 'main') {
                    // Optionally, clean up staging environment
                    // sh "kubectl delete namespace staging"
                }
            }
        }
    }
}

def incrementVersion(version) {
    def parts = version.split('\\.')
    def patch = parts[2].toInteger() + 1
    return "${parts[0]}.${parts[1]}.${patch}"
}

def updateHelmChart(String chartName, String version) {
    dir("charts/${chartName}") {
        sh "sed -i 's/^version:.*/version: ${version}/' Chart.yaml"
        sh "sed -i 's/tag:.*/tag: \"${version}\"/' values.yaml"
        sh "sed -i 's/tag:.*/tag: \"${version}\"/' values-staging.yaml"
        sh "sed -i 's/tag:.*/tag: \"${version}\"/' values-production.yaml"
    }
}